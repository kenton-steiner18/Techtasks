<div>
  <h2>
  	Maneuvering the DOM<br>
  	<span class="author">Authored by Sunny Patel</span>
  </h2>
  <p>
		<h3>$ Rules Everything Around Me:</h3>
		The $ sign is the arguably one of the most iconic parts of jQuery. $(&ltselector&gt) is how you select HTML elements based on their CSS selectors, meaning you can pass it not only an HTML tag, but also a class, an id, and pseudo-classes (however, not pseudo-elements since they are not apart of the DOM). This allows you to greatly simplify maneuvering the DOM.
	</p>
	<p>
		<h4>Example</h4>
		<strong>Pure Javascript:</strong>
		<div class=”code”>
			document.getElementsBy(“ul”);<br>
			document.getElementsByClassName(“highlight”);<br>
			document.getElementById(“footer”);<br>
		</div>
		<strong>jQuery:</strong>
		<div class=”code”>
			$(“ul”);<br>
			$(“.highlight”);<br>
			$(“#footer”);<br>
		</div>
		Note: jQuery uses double quotes, according to the <%= link_to 'jQuery Core Style Guide.', "http://contribute.jquery.org/style-guide/js/#quotes" %>However, single quotes do work.
	</p>
	<p>
		We would like to emphasize that $ uses CSS selectors. This means you can also pass it CSS selectors with ancestors, pseudo-classes, and pathing selectors. Lets look at the following tree and try to select different elements.

		<h4>Tree Example</h4>
		<img src="images/ex_tree.png" alt="Tree Example"/><br>
		<strong>Code:</strong>
		<div class=”code”>
			$(“div .university”); // => the span node under the div in class university<br>
			$(“.university”); // => A collection of all nodes in class university<br>
			$(“body h2”); // => <em>ALL</em> H2 nodes under BODY<br>
			$(“body > h2”); // => the H2 that is a direct child of BODY<br>
			$(“p.draft:nth-child(2)”); // => the IMG node which is the second child of the P tag in the class draft<br>
			$(“div h2,p”); // => Collection of the H2 node and the P node under the div<br>
		</div>
	</p>
	<p>
	Let’s discuss some of the intricate lines in this example. $(“body h2”) will return all the h2 nodes under the body tag, including those that are not direct children. Now this may be what you want; however, typically you just want the direct children. In this case, this selector may select too much. That’s where you can use $(“body > h2”), which does what you expect, selects the h2 tags that are direct children of the body tag.
	$(“p.draft:nth-child(2)”) select the second child of every p tag in class draft. This is an example of how easy it can be to use pseudo-classes with jQuery. However, we’re not done with this example, we’ll come back to it when we discuss how to optimize performance.
	$(“div h2,p”) selects all the h2 nodes or p nodes under a div tag. <br>
	</p>
	<p>
		<h3>Using jQuery methods vs. CSS selectors</h3>
		The code in the Tree Example uses only CSS selectors. However, you can also use jQuery methods when there are multiple tags involved. Here is what the code would look like with jQuery methods.<br>
		<strong>Code:</strong>
		<div class=”code”>
			$(“div”).find(“.university”);<br>
			$(“.university”); // This wouldn’t change because there is only one tag<br>
			$(“body”).find(“h2”); // Recall that this gets all children<br>
			$(“body”).children(“h2”); // This will get only DIRECT children<br>
			$(“p.draft”).nth-child(2);<br>
			$(“div”).find(“h2, p”);<br>
		</div>
		This is the exact same code, however utilizes jQuery methods where possible. Most of the pseudo-classes in CSS are implemented as methods as well. Notice the use of the method .find(&ltselector&gt). This <em>finds</em> all the selectors that are children of a specific node. Also, notice how if you want only the direct children, you use .children(&ltselector&gt). Finally, observe the final line of code, $(“div”).find(“h2, p”). This example is, arguably, easier to read that $(“div h2,p”) since it reads exactly as it does. For all div tags, find its’ children that are h2 tags or p tags. So you have two choices in how to maneuver the DOM, one utilizing CSS selectors and another utilizing jQuery methods; however, which is better?
	</p>
	<p>
		<h3>Optimization</h3>
		It is typically most optimal to use the jQuery methods as much as possible vs. the CSS selectors. However, according to 
		<%= link_to "jQuery.com", "https://learn.jquery.com/performance/optimize-selectors/”"%>, this has become “less important than it used to be, as more browsers implement document.querySelectorAll() and the burden of selection shifts from jQuery to the browser.”
  </p>
  <p>
  	<h3>Walking the DOM</h3>
		“Walking the DOM” is essentially using the methods .next([&ltselector&gt]) and .prev([&ltselector&gt]) to “walk” the DOM. .next() does multiple things depending on whether the optional parameter is given or not. If .next() is called on a node without a given parameter, then it will return the next sibling. If a selector is given, then it will retrieve the next sibling that matches that selector. .prev() only differs in the fact that it returns the previous sibling.
	</p>
	<p>
		<h3>Traversing up the DOM</h3>
		“Traversing up the DOM” is moving through the HTML tree vertically, looking at each ancestor (or child) until you find what you’re looking for. We already discussed a few Tree Traversal methods, .find() and .children(). However these look down the tree. If we wish to search up the tree, then we can use these two common methods, .parent([&ltselector&gt]) and .closest().<br>
		.parent() does what you expect, it returns the parent of the current node. It also optionally filters by a selector.<br>
		.closest(&ltselector&gt) traverses up through all the ancestors of a node until it finds the specified selector. This is commonly used with event listeners that utilize event delegation, which you will learn about later.<br>
		
		Here are a few examples of Traversing the DOM and Walking the DOM.
		<img src="images/ex_tree.png" alt="Tree Example"/><br>
		<strong>Code:</strong>
		<div class=”code”>
			$(“img”).parent(); // => P node that is in the draft class<br>
			$(“img”).closest(“div”); // => DIV node that is in the warning class<br>
			$(“img”).prev(); // => A node that is the previous sibling of the IMG node<br>
			$(“div”).next().prev(); // => Same DIV node that we started with<br>
		</div>
	</p>
	<p>
		<h3>Conclusion</h3>
		This is the end of the Maneuvering the DOM section. One key takeaways is how $(&ltselector&gt) takes CSS selectors and that longer CSS selectors be rewritten with jQuery methods, which is negligibly faster. The other key takeaway is how to navigate the HTML tree horizontally (.next() and .prev()) as well as how to navigate the tree vertically (.parent() and .closest()). There are many other methods when it comes to Walking/Traversing the DOM, so it’s always recommended to look up methods in the <a href="https://api.jquery.com/">API.</a>
	</p>

	<p>
		<h3>Depth of Writing</h3>
		I wrote in all 6 levels of Bloom's taxonomy. I showed knowledge by defining all these different methods. I showed comprehension by describing what they do. I showed application by applying these methods to the tree example I created. The tree example also showed analysis and synthesis because I explained what each line of code did and summarized the key points. I showed synthesis because I created all these examples. Finally, I showed evaluation because I judged which way of accessing the DOM was the most optimal (or why it wasn't really all that optimal).
	</p>
</div>
